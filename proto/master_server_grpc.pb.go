// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterServerClient is the client API for MasterServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServerClient interface {
	RegisterGameServer(ctx context.Context, in *RegisterGameServerRequest, opts ...grpc.CallOption) (MasterServer_RegisterGameServerClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (MasterServer_UpdateClient, error)
}

type masterServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServerClient(cc grpc.ClientConnInterface) MasterServerClient {
	return &masterServerClient{cc}
}

func (c *masterServerClient) RegisterGameServer(ctx context.Context, in *RegisterGameServerRequest, opts ...grpc.CallOption) (MasterServer_RegisterGameServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &MasterServer_ServiceDesc.Streams[0], "/quark.MasterServer/RegisterGameServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServerRegisterGameServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MasterServer_RegisterGameServerClient interface {
	Recv() (*MasterServerMessage, error)
	grpc.ClientStream
}

type masterServerRegisterGameServerClient struct {
	grpc.ClientStream
}

func (x *masterServerRegisterGameServerClient) Recv() (*MasterServerMessage, error) {
	m := new(MasterServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterServerClient) Update(ctx context.Context, opts ...grpc.CallOption) (MasterServer_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &MasterServer_ServiceDesc.Streams[1], "/quark.MasterServer/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServerUpdateClient{stream}
	return x, nil
}

type MasterServer_UpdateClient interface {
	Send(*GameServerStatus) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type masterServerUpdateClient struct {
	grpc.ClientStream
}

func (x *masterServerUpdateClient) Send(m *GameServerStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterServerUpdateClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServerServer is the server API for MasterServer service.
// All implementations must embed UnimplementedMasterServerServer
// for forward compatibility
type MasterServerServer interface {
	RegisterGameServer(*RegisterGameServerRequest, MasterServer_RegisterGameServerServer) error
	Update(MasterServer_UpdateServer) error
	mustEmbedUnimplementedMasterServerServer()
}

// UnimplementedMasterServerServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServerServer struct {
}

func (UnimplementedMasterServerServer) RegisterGameServer(*RegisterGameServerRequest, MasterServer_RegisterGameServerServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterGameServer not implemented")
}
func (UnimplementedMasterServerServer) Update(MasterServer_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMasterServerServer) mustEmbedUnimplementedMasterServerServer() {}

// UnsafeMasterServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServerServer will
// result in compilation errors.
type UnsafeMasterServerServer interface {
	mustEmbedUnimplementedMasterServerServer()
}

func RegisterMasterServerServer(s grpc.ServiceRegistrar, srv MasterServerServer) {
	s.RegisterService(&MasterServer_ServiceDesc, srv)
}

func _MasterServer_RegisterGameServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterGameServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterServerServer).RegisterGameServer(m, &masterServerRegisterGameServerServer{stream})
}

type MasterServer_RegisterGameServerServer interface {
	Send(*MasterServerMessage) error
	grpc.ServerStream
}

type masterServerRegisterGameServerServer struct {
	grpc.ServerStream
}

func (x *masterServerRegisterGameServerServer) Send(m *MasterServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MasterServer_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServerServer).Update(&masterServerUpdateServer{stream})
}

type MasterServer_UpdateServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*GameServerStatus, error)
	grpc.ServerStream
}

type masterServerUpdateServer struct {
	grpc.ServerStream
}

func (x *masterServerUpdateServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterServerUpdateServer) Recv() (*GameServerStatus, error) {
	m := new(GameServerStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServer_ServiceDesc is the grpc.ServiceDesc for MasterServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quark.MasterServer",
	HandlerType: (*MasterServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterGameServer",
			Handler:       _MasterServer_RegisterGameServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _MasterServer_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/master_server.proto",
}
