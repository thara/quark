// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LobbyClient is the client API for Lobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	InLobby(ctx context.Context, in *InLobbyRequest, opts ...grpc.CallOption) (Lobby_InLobbyClient, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
}

type lobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyClient(cc grpc.ClientConnInterface) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/quark.Lobby/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) InLobby(ctx context.Context, in *InLobbyRequest, opts ...grpc.CallOption) (Lobby_InLobbyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Lobby_ServiceDesc.Streams[0], "/quark.Lobby/InLobby", opts...)
	if err != nil {
		return nil, err
	}
	x := &lobbyInLobbyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lobby_InLobbyClient interface {
	Recv() (*InLobbyMessage, error)
	grpc.ClientStream
}

type lobbyInLobbyClient struct {
	grpc.ClientStream
}

func (x *lobbyInLobbyClient) Recv() (*InLobbyMessage, error) {
	m := new(InLobbyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lobbyClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, "/quark.Lobby/JoinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServer is the server API for Lobby service.
// All implementations must embed UnimplementedLobbyServer
// for forward compatibility
type LobbyServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	InLobby(*InLobbyRequest, Lobby_InLobbyServer) error
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	mustEmbedUnimplementedLobbyServer()
}

// UnimplementedLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedLobbyServer struct {
}

func (UnimplementedLobbyServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedLobbyServer) InLobby(*InLobbyRequest, Lobby_InLobbyServer) error {
	return status.Errorf(codes.Unimplemented, "method InLobby not implemented")
}
func (UnimplementedLobbyServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLobbyServer) mustEmbedUnimplementedLobbyServer() {}

// UnsafeLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServer will
// result in compilation errors.
type UnsafeLobbyServer interface {
	mustEmbedUnimplementedLobbyServer()
}

func RegisterLobbyServer(s grpc.ServiceRegistrar, srv LobbyServer) {
	s.RegisterService(&Lobby_ServiceDesc, srv)
}

func _Lobby_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quark.Lobby/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_InLobby_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InLobbyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LobbyServer).InLobby(m, &lobbyInLobbyServer{stream})
}

type Lobby_InLobbyServer interface {
	Send(*InLobbyMessage) error
	grpc.ServerStream
}

type lobbyInLobbyServer struct {
	grpc.ServerStream
}

func (x *lobbyInLobbyServer) Send(m *InLobbyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Lobby_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quark.Lobby/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lobby_ServiceDesc is the grpc.ServiceDesc for Lobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quark.Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Lobby_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Lobby_JoinRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InLobby",
			Handler:       _Lobby_InLobby_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/lobby.proto",
}
