syntax = "proto3";

package quark;

option go_package = "quark/proto";

service Room {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse);
  rpc Service(stream ClientMessage) returns (stream ServerMessage);
}

message CreateRoomRequest { string roomName = 1; }

message CreateRoomResponse {
  uint64 roomID = 1;
  bool alreadyExist = 2;
}

message ClientMessage {
  oneof command {
    JoinRoomCommand joinRoom = 1;
    SendMessageCommand sendMessage = 2;
    LeaveRoomCommand leaveRoom = 3;
  }

  message JoinRoomCommand { uint64 roomID = 1; }
  message SendMessageCommand { Message message = 1; }
  message LeaveRoomCommand {}
}

message Message {
  uint32 code = 1;
  bytes payload = 2;
}

message ServerMessage {
  oneof event {
    // command result
    CommandError onCommandFailed = 1;
    JoinRoomSuccess onJoinRoomSuccess = 2;
    LeaveRoomSuccess onLeaveRoomSuccess = 3;

    ReceivedMessageEvent onMessageReceived = 4;
  }

  message CommandError {
    string errorCode = 1;
    string errorDetail = 2;

    oneof errorCommand {
      ClientMessage.JoinRoomCommand joinRoom = 3;
      ClientMessage.SendMessageCommand sendMessage = 4;
      ClientMessage.LeaveRoomCommand leaveRoom = 5;
    }
  }

  message JoinRoomSuccess { string actorID = 1; }
  message LeaveRoomSuccess {}

  message ReceivedMessageEvent {
    Message message = 1;
    string senderID = 2;
  }
}
